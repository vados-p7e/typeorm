{"version":3,"sources":["../browser/src/persistence/SubjectChangedColumnsComputer.ts"],"names":[],"mappings":"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","file":"SubjectChangedColumnsComputer.js","sourcesContent":["import {Subject} from \"./Subject\";\nimport {DateUtils} from \"../util/DateUtils\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\n\n/**\n * Finds what columns are changed in the subject entities.\n */\nexport class SubjectChangedColumnsComputer {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds what columns are changed in the subject entities.\n     */\n    compute(subjects: Subject[]) {\n        subjects.forEach(subject => {\n            this.computeDiffColumns(subject);\n            this.computeDiffRelationalColumns(subjects, subject);\n        });\n    }\n    \n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Differentiate columns from the updated entity and entity stored in the database.\n     */\n    protected computeDiffColumns(subject: Subject): void {\n\n        // if there is no persisted entity then nothing to compute changed in it\n        if (!subject.entity)\n            return;\n\n        subject.metadata.columns.forEach(column => {\n\n            // ignore special columns\n            if (column.isVirtual ||\n                column.isParentId ||\n                column.isDiscriminator ||\n                column.isUpdateDate ||\n                column.isVersion ||\n                column.isCreateDate)\n                return;\n\n            // get user provided value - column value from the user provided persisted entity\n            let entityValue = column.getEntityValue(subject.entity!);\n\n            // we don't perform operation over undefined properties (but we DO need null properties!)\n            if (entityValue === undefined)\n                return;\n\n            // if there is no database entity then all columns are treated as new, e.g. changed\n            if (subject.databaseEntity) {\n\n                // get database value of the column\n                let databaseValue = column.getEntityValue(subject.databaseEntity);\n\n                // filter out \"relational columns\" only in the case if there is a relation object in entity\n                if (column.relationMetadata) {\n                    const value = column.relationMetadata.getEntityValue(subject.entity!);\n                    if (value !== null && value !== undefined)\n                        return;\n                }\n\n                // normalize special values to make proper comparision\n                if (entityValue !== null && entityValue !== undefined) {\n                    if (column.type === \"date\") {\n                        entityValue = DateUtils.mixedDateToDateString(entityValue);\n\n                    } else if (column.type === \"time\") {\n                        entityValue = DateUtils.mixedDateToTimeString(entityValue);\n\n                    } else if (column.type === \"datetime\" || column.type === Date) {\n                        entityValue = DateUtils.mixedDateToUtcDatetimeString(entityValue);\n                        databaseValue = DateUtils.mixedDateToUtcDatetimeString(databaseValue);\n\n                    } else if (column.type === \"json\" || column.type === \"jsonb\") {\n                        entityValue = JSON.stringify(entityValue);\n                        if (databaseValue !== null && databaseValue !== undefined)\n                            databaseValue = JSON.stringify(databaseValue);\n\n                    } else if (column.type === \"sample-array\") {\n                        entityValue = DateUtils.simpleArrayToString(entityValue);\n                        databaseValue = DateUtils.simpleArrayToString(databaseValue);\n                    }\n                }\n\n                // if value is not changed - then do nothing\n                if (entityValue === databaseValue)\n                    return;\n            }\n\n            // find if there is already a column to be changed\n            const changeMap = subject.changeMaps.find(changeMap => changeMap.column === column);\n            if (changeMap) { // and update its value if it was found\n                changeMap.value = entityValue;\n\n            } else { // if it wasn't found add a new column for change\n                subject.changeMaps.push({\n                    column: column,\n                    value: entityValue\n                });\n            }\n        });\n    }\n\n    /**\n     * Difference columns of the owning one-to-one and many-to-one columns.\n     */\n    protected computeDiffRelationalColumns(allSubjects: Subject[], subject: Subject): void {\n\n        // if there is no persisted entity then nothing to compute changed in it\n        if (!subject.entity)\n            return;\n\n        subject.metadata.relationsWithJoinColumns.forEach(relation => {\n\n            // get the related entity from the persisted entity\n            let relatedEntity = relation.getEntityValue(subject.entity!);\n\n            // we don't perform operation over undefined properties (but we DO need null properties!)\n            if (relatedEntity === undefined)\n                return;\n\n            // if there is no database entity then all relational columns are treated as new, e.g. changed\n            if (subject.databaseEntity) {\n\n                // here we cover two scenarios:\n                // 1. related entity can be another entity which is natural way\n                // 2. related entity can be just an entity id\n                // if relation entity is just a relation id set (for example post.tag = 1)\n                // then we create an id map from it to make a proper comparision\n                let relatedEntityRelationIdMap: ObjectLiteral = relatedEntity;\n                if (relatedEntityRelationIdMap !== null && !(relatedEntityRelationIdMap instanceof Object))\n                    relatedEntityRelationIdMap = relation.getRelationIdMap(relatedEntityRelationIdMap)!;\n\n                // get database related entity. Since loadRelationIds are used on databaseEntity\n                // related entity will contain only its relation ids\n                const databaseRelatedEntityRelationIdMap = relation.getEntityValue(subject.databaseEntity);\n\n                // if relation ids are equal then we don't need to update anything\n                const areRelatedIdsEqual = relation.inverseEntityMetadata.compareIds(relatedEntityRelationIdMap, databaseRelatedEntityRelationIdMap);\n                if (areRelatedIdsEqual)\n                    return;\n            }\n\n            // if there is an inserted subject for the related entity of the persisted entity then use it as related entity\n            // this code is used for related entities without ids to be properly inserted (and then updated if needed)\n            const valueSubject = allSubjects.find(subject => subject.mustBeInserted && subject.entity === relatedEntity);\n            if (valueSubject)\n                relatedEntity = valueSubject;\n\n            // find if there is already a relation to be changed\n            const changeMap = subject.changeMaps.find(changeMap => changeMap.relation === relation);\n            if (changeMap) { // and update its value if it was found\n                changeMap.value = relatedEntity;\n\n            } else { // if it wasn't found add a new relation for change\n                subject.changeMaps.push({\n                    relation: relation,\n                    value: relatedEntity\n                });\n            }\n        });\n    }\n\n}\n"],"sourceRoot":".."}