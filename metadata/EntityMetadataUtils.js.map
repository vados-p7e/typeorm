{"version":3,"sources":["../../src/metadata/EntityMetadataUtils.ts"],"names":[],"mappings":";;AAEA,6CAA0C;AAE1C;;GAEG;AACH;IAAA;IA4DA,CAAC;IA1DG;;OAEG;IACI,sCAAkB,GAAzB,UAA0B,QAAwB,EAAE,MAAqB,EAAE,MAAmB;QAA9F,iBAgBC;QAhB0E,uBAAA,EAAA,WAAmB;QAC1F,IAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;YAE3B,kHAAkH;YAClH,6DAA6D;YAC7D,IAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;YACrD,EAAE,CAAC,CAAC,QAAQ,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACnD,IAAM,QAAQ,GAAG,KAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE,UAAU,CAAC,CAAC;gBAC5E,KAAK,CAAC,IAAI,OAAV,KAAK,EAAS,QAAQ,EAAE;YAC5B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;gBAC/C,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrB,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAED;;OAEG;IACI,wCAAoB,GAA3B,UAA4B,MAAqB,EAAE,YAAoB;QACnE,IAAM,UAAU,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC3C,IAAM,SAAS,GAAG,UAAC,MAAqB;YACpC,IAAM,YAAY,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;YACxC,IAAM,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YAC3D,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC;gBAClB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAE5B,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC;QACF,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACI,8BAAU,GAAjB,UAAkB,WAA4B,EAAE,YAA6B;QACzE,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,UAAA,UAAU;YAChC,MAAM,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,WAAW,IAAI,OAAA,mBAAQ,CAAC,WAAW,CAAC,UAAU,EAAE,WAAW,CAAC,EAA7C,CAA6C,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACI,8BAAU,GAAjB,UAAkB,OAAgC,EAAE,QAAiC;QACjF,EAAE,CAAC,CAAC,OAAO,KAAK,SAAS,IAAI,OAAO,KAAK,IAAI,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,CAAC;YACzF,MAAM,CAAC,KAAK,CAAC;QAEjB,MAAM,CAAC,mBAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACnD,CAAC;IAEL,0BAAC;AAAD,CA5DA,AA4DC,IAAA;AA5DY,kDAAmB","file":"EntityMetadataUtils.js","sourcesContent":["import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {OrmUtils} from \"../util/OrmUtils\";\n\n/**\n * Utils used to work with EntityMetadata objects.\n */\nexport class EntityMetadataUtils {\n\n    /**\n     * Creates a property paths for a given entity.\n     */\n    static createPropertyPath(metadata: EntityMetadata, entity: ObjectLiteral, prefix: string = \"\") {\n        const paths: string[] = [];\n        Object.keys(entity).forEach(key => {\n\n            // check for function is needed in the cases when createPropertyPath used on values containg a function as a value\n            // example: .update().set({ name: () => `SUBSTR('', 1, 2)` })\n            const parentPath = prefix ? prefix + \".\" + key : key;\n            if (metadata.hasEmbeddedWithPropertyPath(parentPath)) {\n                const subPaths = this.createPropertyPath(metadata, entity[key], parentPath);\n                paths.push(...subPaths);\n            } else {\n                const path = prefix ? prefix + \".\" + key : key;\n                paths.push(path);\n            }\n        });\n        return paths;\n    }\n\n    /**\n     * Creates a property paths for a given entity.\n     */\n    static getPropertyPathValue(entity: ObjectLiteral, propertyPath: string) {\n        const properties = propertyPath.split(\".\");\n        const recursive = (object: ObjectLiteral): any => {\n            const propertyName = properties.shift();\n            const value = propertyName ? object[propertyName] : object;\n            if (properties.length)\n                return recursive(value);\n\n            return value;\n        };\n        return recursive(entity);\n    }\n\n    /**\n     * Finds difference between two entity id maps.\n     * Returns items that exist in the first array and absent in the second array.\n     */\n    static difference(firstIdMaps: ObjectLiteral[], secondIdMaps: ObjectLiteral[]): ObjectLiteral[] {\n        return firstIdMaps.filter(firstIdMap => {\n            return !secondIdMaps.find(secondIdMap => OrmUtils.deepCompare(firstIdMap, secondIdMap));\n        });\n    }\n\n    /**\n     * Compares ids of the two entities.\n     * Returns true if they match, false otherwise.\n     */\n    static compareIds(firstId: ObjectLiteral|undefined, secondId: ObjectLiteral|undefined): boolean {\n        if (firstId === undefined || firstId === null || secondId === undefined || secondId === null)\n            return false;\n\n        return OrmUtils.deepCompare(firstId, secondId);\n    }\n\n}"],"sourceRoot":".."}